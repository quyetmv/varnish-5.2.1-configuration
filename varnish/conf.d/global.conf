vcl 4.0;

import std;
import directors;

# Đọc thêm về cấu hình backend tại đây
# https://varnish-cache.org/docs/trunk/users-guide/vcl-backends.html

backend default {
  .host = "127.0.0.1"; # Đổi thành IP của máy chủ hoặc giữ nguyên
  .port = "8181"; # Port của Apache
  .max_connections = 300;

  .probe = {
    .request =
      "HEAD / HTTP/1.1"
      "Host: localhost"
      "Connection: close"
      "User-Agent: Varnish Health Probe";

    .interval  = 5s; # check Apache có còn hoạt động không mỗi 5s
    .timeout   = 1s; # timeout sau 1s
    .window    = 5;  # Nếu > 3 lần thành công trên tổng 5 lần kiểm tra thì vẫn ổn, còn không thì backend có vấn đề
    .threshold = 3;
  }

  .first_byte_timeout     = 300s;   # Chờ nhận First Byte từ Backend
  .connect_timeout        = 5s;     # Thời gian chờ kết nối Backend
  .between_bytes_timeout  = 2s;     # Thời gian chờ mỗi lần nhận dữ liệu
}

acl purge {
  # Sử dụng để purge sau này, có thể thêm cả IP của Server vào
  "localhost";
  "127.0.0.1";
  "::1";
}

    # THÊM CÁC SERVER VÀO ĐÂY

sub vcl_init {

  new vdir = directors.round_robin();
  
  # Cú pháp mẫu
  # vdir.add_backend(server...);
  # vdir.add_backend(servern);
  
  vdir.add_backend(default);
  vdir.add_backend(trangweb1);
  vdir.add_backend(trangweb2);
}

sub vcl_recv {

  set req.backend_hint = vdir.backend(); # chuyển toàn bộ trafic đến vdir director

  # Xóa các cổng sau đường dẫn
  set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");

  # xóa proxy header (xem thêm: https://httpoxy.org/#mitigate-varnish )
  unset req.http.proxy;

  # Normalize các truy vấn
  set req.url = std.querysort(req.url);

  # cho phép purging
  if (req.method == "PURGE") {
    if (!client.ip ~ purge) { # purge is the ACL defined at the begining
      # Lỗi nếu không phải IP cho phép
      return (synth(405, "IP: " + client.ip  +  " is not allowed to send PURGE requests."));
    }
    # Thông báo nếu Purge thành công 
    return (purge);
  }

  # Varnish chỉ hoạt động với request bình thường
  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "PATCH" &&
      req.method != "DELETE") {
    /* Non-RFC2616 or CONNECT which is weird. */
    return (pipe);
  }

  # Hỗ trợ websocket ( https://varnish-cache.org/docs/trunk/users-guide/vcl-example-websockets.html )
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  # Chỉ cache GET và HEAD. POST sẽ luôn là passed.
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Xóa thông số UTM của Google Analytics
  if (req.url ~ "(\?|&)(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=") {
    set req.url = regsuball(req.url, "&(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "");
    set req.url = regsuball(req.url, "\?(utm_source|utm_medium|utm_campaign|utm_content|gclid|cx|ie|cof|siteurl)=([A-z0-9_\-\.%25]+)", "?");
    set req.url = regsub(req.url, "\?&", "?");
    set req.url = regsub(req.url, "\?$", "");
  }

  # Xóa hash của URL
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Cắt bớt ? nếu có
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Xóa "has_js" cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");

  # Xóa Google Analytics cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_gat=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");

  # Xóa DoubleClick cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");

  # Xóa Quant Capital cookies 
  set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");

  # Xóa AddThis cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");

  # Xóa ";" phía trước cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

  # Xóa cookie rỗng
  if (req.http.cookie ~ "^\s*$") {
    unset req.http.cookie;
  }

  if (req.http.Cache-Control ~ "(?i)no-cache") {
    if (client.ip ~ purge) {
      # Bỏ qua truy vấn proxy hay no-cache từ bot
      if (! (req.http.Via || req.http.User-Agent ~ "(?i)bot" || req.http.X-Purge)) {
        return(purge);
      }
    }
  }

  # Chuyển thẳng các file tĩnh đến người dùng thay vì đợi Varnish đọc file
  if (req.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  # Xóa cookie ở các file tĩnh
  if (req.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  if (req.http.Authorization) {
    # Không cache xác thực
    return (pass);
  }

  return (hash);
}

sub vcl_pipe {

  # Hỗ trợ websocket
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
  }

  return (pipe);
}

sub vcl_pass {

}

sub vcl_hash {
  hash_data(req.url);

  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }
}

sub vcl_hit {

  if (obj.ttl >= 0s) {
    return (deliver);
  }

  if (std.healthy(req.backend_hint)) {
    if (obj.ttl + 10s > 0s) {
      return (deliver);
    } else {
      return(miss);
    }
  } else {
      if (obj.ttl + obj.grace > 0s) {
      return (deliver);
    } else {
      return (miss);
    }
  }
  return (miss);
}

sub vcl_miss {
  return (fetch);
}

sub vcl_backend_response {
  if (bereq.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
  }

  if (bereq.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.do_stream = true;
  }

	# Tối ưu với các chuyển hướng 301 và 302
	
  if (beresp.status == 301 || beresp.status == 302) {
    set beresp.http.Location = regsub(beresp.http.Location, ":[0-9]+", "");
  }

  # đặt 2p cache cho file tĩnh
  if (beresp.ttl <= 0s || beresp.http.Set-Cookie || beresp.http.Vary == "*") {
    set beresp.ttl = 120s;
    set beresp.uncacheable = true;
    return (deliver);
  }

  # Không cache lỗi 50x
  if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {
    return (abandon);
  }

  # Mặc định cache trong vòng 6h
  set beresp.grace = 6h;

  return (deliver);
}

sub vcl_deliver {

  if (obj.hits > 0) { # Thêm thông báo HIT/MISS, xóa đi nếu không cần thiết
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }

	# Đến số lần HIT cache
	
  set resp.http.X-Cache-Hits = obj.hits;

  # Xóa phiên bản PHP
  unset resp.http.X-Powered-By;

  # Xóa một số header của hệ thống và Apache (bảo mật)
  unset resp.http.Server;
  unset resp.http.X-Drupal-Cache;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.Link;
  unset resp.http.X-Generator;

  return (deliver);
}

sub vcl_purge {
  if (req.method != "PURGE") {
    # restart request
    set req.http.X-Purge = "Yes";
    return(restart);
  }
}

sub vcl_synth {
  if (resp.status == 720) {
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return (deliver);
  } elseif (resp.status == 721) {
    set resp.http.Location = resp.reason;
    set resp.status = 302;
    return (deliver);
  }
  return (deliver);
}


sub vcl_fini {
  return (ok);
}
